.. _ex18:


Creeping flow
-------------

.. note::
   This example requires the external package `pygmsh <https://pypi.org/project/pygmsh/>`_.
   
The stream-function :math:`\psi` for two-dimensional creeping flow is
governed by the biharmonic equation

.. math::  
    \nu \Delta^2\psi = \mathrm{rot}\,\boldsymbol{f}

where :math:`\nu` is the kinematic viscosity (assumed constant),
:math:`\boldsymbol{f}` the volumetric body-force, and :math:`\mathrm{rot}\,\boldsymbol{f} \equiv
\partial f_y/\partial x - \partial f_x/\partial y`.  The boundary
conditions at a wall are that :math:`\psi` is constant (the wall is
impermeable) and that the normal component of its gradient vanishes (no
slip).  Thus, the boundary value problem is analogous to that of
bending a clamped plate, and may be treated with Morley elements as in
the Kirchhoff plate tutorial.

Here we consider a buoyancy force :math:`\boldsymbol{f} = x\hat{j}`,
which arises in the Boussinesq approximation of natural convection
with a horizontal temperature gradient (`Batchelor 1954
<http://dx.doi.org/10.1090/qam/64563>`_).

For a circular cavity of radius :math:`a`, the problem admits a
polynomial solution with circular stream-lines:

.. math::
    \psi = \left(1 - (x^2+y^2)/a^2\right)^2 / 64.

.. figure:: ex20_stream-lines.png

   The solved stream-lines

.. figure:: ex20_velocity-vectors.png

   The solved velocity field
    
The complete source code reads as follows:

.. literalinclude:: ex20.py
    :linenos:
