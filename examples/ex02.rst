Kirchhoff plate
---------------

This example demonstrates the solution of a slightly more complicated problem
with multiple boundary conditions and a fourth-order differential operator. We
consider the Kirchhoff plate bending problem which finds its applications in
solid mechanics. For a stationary plate of constant thickness
:math:`d`, the governing equation reads: find the deflection :math:`u : \Omega \rightarrow \mathbb{R}` that satisfies

.. math::
    \frac{Ed^3}{12(1-\nu^2)} \Delta^2 u = f, \quad \text{in $\Omega$},

where :math:`\Omega = (0,1)^2`, :math:`f` is a perpendicular force,
:math:`E` and :math:`\nu` are material parameters.
In this example, we analyse a :math:`1\,\text{m}^2` plate of steel with thickness :math:`d=0.1\,\text{m}`.
The Young's modulus of steel is :math:`E = 200 \cdot 10^9\,\text{Pa}` and Poisson
ratio :math:`\nu = 0.3`.

In reality, the operator

.. math::
    \frac{Ed^3}{12(1-\nu^2)} \Delta^2 

is a combination of multiple first-order operators:

.. math::
    \boldsymbol{K}(u) = - \boldsymbol{\varepsilon}(\nabla u), \quad \boldsymbol{\varepsilon}(\boldsymbol{w}) = \frac12(\nabla \boldsymbol{w} + \nabla \boldsymbol{w}^T),

.. math::
    \boldsymbol{M}(u) = \frac{d^3}{12} \mathbb{C} \boldsymbol{K}(u), \quad \mathbb{C} \boldsymbol{T} = \frac{E}{1+\nu}\left( \boldsymbol{T} + \frac{\nu}{1-\nu}(\text{tr}\,\boldsymbol{T})\boldsymbol{I}\right),

where :math:`\boldsymbol{I}` is the identity matrix. In particular,

.. math::
    \frac{Ed^3}{12(1-\nu^2)} \Delta^2 u = - \text{div}\,\textbf{div}\,\boldsymbol{M}(u).

There are several boundary conditions that the problem can take.
The *fully clamped* boundary condition reads

.. math::
    u = \frac{\partial u}{\partial n} = 0.

Moreover, the *simply supported* boundary condition reads

.. math::
    u = 0, \quad M_{nn}(u)=0,

where :math:`M_{nn} = \boldsymbol{n} \cdot (\boldsymbol{M} \boldsymbol{n})`.
Finally, the *free* boundary condition reads

.. math::
    M_{nn}(u)=0, \quad V_{n}(u)=0,

where :math:`V_n = \boldsymbol{V} \cdot \boldsymbol{n}` and
:math:`\boldsymbol{V}` is the `Kirchhoff shear force <https://arxiv.org/pdf/1707.08396.pdf>`_. The exact
definition is not needed here as this boundary condition is a
natural one.

The correct weak formulation for the problem is: find :math:`u \in V` such that

.. math::
    (\boldsymbol{M}(u),\boldsymbol{K}(v)) = (f, v) \quad \forall v \in V,

where :math:`V` is now a subspace of :math:`H^2` with the essential boundary
conditions for :math:`u` and :math:`\frac{\partial u}{\partial n}`.

Instead of constructing a subspace for :math:`H^2`, we discretise
the problem using the non-conforming Morley finite element which
is a piecewise quadratic :math:`C^0` element.  We begin by
creating a simple symmetric mesh for the unit square.

.. literalinclude:: ../examples/ex02.py
    :lines: 1-5

After creating the mesh, we evaluate the finite element basis at the global
quadrature points. This could be done as before but instead we demonstrate
the extended syntax of :class:`~skfem.assembly.InteriorBasis`
constructor which allows the user to input an object of type
:class:`~skfem.mapping.Mapping` and the integration order as
optional parameters:

.. literalinclude:: ../examples/ex02.py
    :lines: 8-9

The rather complicated bilinear form can be written in several
parts:

.. literalinclude:: ../examples/ex02.py
    :lines: 11-32

As loading, we shall consider a distributed force of :math:`1\,\text{MPa}`,
i.e. :math:`f=10^6\,\text{Pa}`.

.. literalinclude:: ../examples/ex02.py
    :lines: 34-36

Assembling the stiffness matrix and the load vector
is now two calls to :func:`~skfem.assembly.asm`:

.. literalinclude:: ../examples/ex02.py
    :lines: 38-39

Next we demonstrate a convenient way of setting essential
boundary conditions on different parts of the boundary. We begin
by defining :class:`skfem.mesh.Submesh` objects that contain
the nodes and the facets belonging to the respective boundaries:

.. literalinclude:: ../examples/ex02.py
    :lines: 41-45

The corresponding degree-of-freedom numbers (i.e. rows and columns
of the stiffness matrix) can be found using
:meth:`~skfem.assembly.GlobalBasis.get_dofs` which returns a
dictionary of tuples. These tuples contain the degree-of-freedom
numbers corresponding to different topological entities (nodes,
facets, etc.) of the submesh. In the following, we continue by
constructing an array of boundary degree-of-freedom numbers:

.. literalinclude:: ../examples/ex02.py
    :lines: 47-56

The solution of the linear system is now done similarly as in the
Poisson example.

.. literalinclude:: ../examples/ex02.py
    :lines: 58-60

The complete source code reads as follows:

.. literalinclude:: ../examples/ex02.py
    :linenos:
